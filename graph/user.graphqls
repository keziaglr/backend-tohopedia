scalar Date

type User {
    id: Int!
    name: String!
    email: String!
    password: String!
    dob: Date!
    gender: String!
    phoneNumber: String!
    profilePicture: String!
    isSuspend: Boolean!
    shippingAddress: String!
    role: String!

    voucher: [Voucher!]!
    wishlist: [Product!]!

    createdAt: Time!
    updatedAt: Time!
    deletedAt: Time!
}

input AuthUser {
    email: String!
    password: String!
    otpCode: String!
}

input UpdateUser{
    profilePicture: String!
    name: String!
    dob: Date!
    gender: String!
    email: String!
    phoneNumber: String!
}

type Query {
    users: [User!]!
    getUserByEmailPass(email: String!, password: String!): User!
    getUserAuth(input: AuthUser!): User!
    getUserByID(id: Int!): User!
    getUserByEmail(email: String!): User!
}

type Mutation {
    createUser(input: AuthUser!): User!
    updateUser(id: Int!, input: UpdateUser!): User!
    resetPassword(id: Int!, password: String!): User!
}